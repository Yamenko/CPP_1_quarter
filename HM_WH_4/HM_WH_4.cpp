#include <iostream>
#include <vector>

//=========================================================================================
// 1. Имеется отсортированный массив целых чисел.Необходимо разработать функцию
// insert_sorted, которая принимает вектор и новое число и вставляет новое число в
// определенную позицию в векторе, чтобы упорядоченность контейнера сохранялась.
// Реализуйте шаблонную функцию insert_sorted, которая сможет аналогично работать с любым
// контейнером, содержащим любой тип значения.
//=========================================================================================

template<typename T>
void insert_sorted(std::vector<T>& vector, T& element) {
    auto pos = std::find_if(vector.begin(), vector.end(), [&element](T oneEl) {return element < oneEl;});
    vector.insert(pos, element);
}

// для печати любых других не стандартных типов должен быть перегружен оператор "<<" !!!
template<typename T>
void PrintVector(std::vector<T>& vector) {
    for (auto it : vector) {
        std::cout << it << " ";
    }
    std::cout << std::endl;
}

//=========================================================================================
// 2. Сгенерируйте вектор a, состоящий из 100 вещественный чисел, представляющий собой
// значения аналогового сигнала.
// На основе этого массива чисел создайте другой вектор целых чисел b, 
// представляющий цифровой сигнал, в котором будут откинуты дробные части чисел.
// Выведите получившиеся массивы чисел.
// Посчитайте ошибку, которой обладает цифровой сигнал по сравнению с аналоговым.
//=========================================================================================





int main()
{
    std::cout << "----------------Task 1--------------------" << std::endl;
    std::vector<int> v1 = { 10, 20, 20, 30, 30, 40, 50 };
    std::cout << "Before: ";
    PrintVector(v1);
    
    int a = 55;
    insert_sorted(v1, a);
    std::cout << "After1: ";
    PrintVector(v1);
   
    int b = 30;
    insert_sorted(v1, b);
    std::cout << "After2: ";
    PrintVector(v1);
    
    std::cout << "------------------------------------------" << std::endl;
    std::cout << "----------------Task 2--------------------" << std::endl;
}